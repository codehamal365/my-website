"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6552],{9745:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>m});var o=t(4848),s=t(8453);const i={},r="cosmos async \u64cd\u4f5c",a={id:"azure/cosmos",title:"cosmos async \u64cd\u4f5c",description:"Pip install azure-cosmos",source:"@site/docs/azure/cosmos.md",sourceDirName:"azure",slug:"/azure/cosmos",permalink:"/my-website/docs/azure/cosmos",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/azure/cosmos.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Azure Functions",permalink:"/my-website/docs/azure/azure functions"},next:{title:"Git\u547d\u4ee4\u6e05\u5355",permalink:"/my-website/docs/git/git-commands"}},c={},m=[];function u(n){const e={blockquote:"blockquote",code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"cosmos-async-\u64cd\u4f5c",children:"cosmos async \u64cd\u4f5c"}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"Pip install azure-cosmos"}),"\n",(0,o.jsx)(e.p,{children:"Pip install aiohttp"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport os\nfrom contextlib import suppress\nfrom typing import Dict\n\nfrom azure.cosmos import PartitionKey\nfrom azure.cosmos.aio import CosmosClient, ContainerProxy\nfrom azure.cosmos.exceptions import CosmosResourceNotFoundError\n\n\nasync def create_item(container_client: ContainerProxy, item: Dict):\n    await container_client.create_item(item)\n\n\nasync def main():\n    async with CosmosClient.from_connection_string(\n            os.environ[\'CosmosDBConnectionString\']\n    ) as client:\n        database = client.get_database_client("odcpersistence")\n        with suppress(CosmosResourceNotFoundError):\n            await database.delete_container(\'mappings\')\n\n        container_client = await database.create_container(\n            id="mappings", partition_key=PartitionKey(path="/id")\n        )\n\n        jobs = [\n            create_item(container_client, {"id": "id"})\n        ]\n        await asyncio.gather(*jobs)\n\n\nif __name__ == \'__main__\':\n    asyncio.run(main())\n\n'})})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>a});var o=t(6540);const s={},i=o.createContext(s);function r(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);