"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7399],{6621:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var t=r(4848),i=r(8453);const s={},a=void 0,l={id:"spring/Spring-Retry",title:"Spring-Retry",description:"OverView",source:"@site/docs/spring/Spring-Retry.md",sourceDirName:"spring",slug:"/spring/Spring-Retry",permalink:"/my-website/docs/spring/Spring-Retry",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/spring/Spring-Retry.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ConfigurationProperties\u89e3\u6790",permalink:"/my-website/docs/spring/ConfigurationProperties\u89e3\u6790"},next:{title:"Springboot\u52a0\u8f7d\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6",permalink:"/my-website/docs/spring/Springboot\u52a0\u8f7d\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6"}},c={},o=[{value:"OverView",id:"overview",level:2},{value:"Maven Dependencies",id:"maven-dependencies",level:2},{value:"Enable Spring Retry",id:"enable-spring-retry",level:2},{value:"Using Spring Retry",id:"using-spring-retry",level:2},{value:"@Retryable Without Recovery",id:"retryable-without-recovery",level:3},{value:"@Retryable and @Recover",id:"retryable-and-recover",level:3},{value:"Customizing @Retryable&#39;s Behavior",id:"customizing-retryables-behavior",level:3},{value:"Using Spring Properties",id:"using-spring-properties",level:3},{value:"RetryTemplate",id:"retrytemplate",level:2},{value:"RetryOperations",id:"retryoperations",level:3},{value:"RetryTemplate Configuration",id:"retrytemplate-configuration",level:3},{value:"Using the RetryTemplate",id:"using-the-retrytemplate",level:3},{value:"Listeners",id:"listeners",level:2},{value:"Adding Callbacks",id:"adding-callbacks",level:3},{value:"Registering the Listener",id:"registering-the-listener",level:3},{value:"Testing the Results",id:"testing-the-results",level:2},{value:"<strong>Conclusion</strong>",id:"conclusion",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"overview",children:"OverView"}),"\n",(0,t.jsx)(n.p,{children:"Spring Retry provides an ability to automatically re-invoke a failed operation. This is helpful where the errors may be transient (like a momentary network glitch)."}),"\n",(0,t.jsxs)(n.p,{children:["In this tutorial, we\u2019ll see the various ways to use ",(0,t.jsx)(n.a,{href:"https://github.com/spring-projects/spring-retry",children:"Spring Retry"}),": annotations, ",(0,t.jsx)(n.em,{children:"RetryTemplate"})," and callbacks."]}),"\n",(0,t.jsx)(n.h2,{id:"maven-dependencies",children:"Maven Dependencies"}),"\n",(0,t.jsxs)(n.p,{children:["Let's begin by adding the ",(0,t.jsx)(n.strong,{children:"spring-retry"})," and ",(0,t.jsx)(n.strong,{children:"Spring AOP"})," dependency into our pom.xml file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.springframework.retry</groupId>\n    <artifactId>spring-retry</artifactId>\n    <version>1.2.5.RELEASE</version>\n</dependency>\n\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-aspects</artifactId>\n    <version>5.2.8.RELEASE</version>\n</dependency>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Have a look at Maven Central for the latest versions of the ",(0,t.jsx)(n.a,{href:"https://search.maven.org/search?q=spring-retry",children:"spring-retry"})," and ",(0,t.jsx)(n.a,{href:"https://search.maven.org/search?q=a:spring-aspects",children:"spring-aspects"})," dependencies."]}),"\n",(0,t.jsx)(n.h2,{id:"enable-spring-retry",children:"Enable Spring Retry"}),"\n",(0,t.jsxs)(n.p,{children:["To enable Spring Retry in an application, we need to add the @EnableRetry annotation to our ",(0,t.jsx)(n.em,{children:"@Configuration"})," class:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Configuration\n@EnableRetry\npublic class AppConfig { ... }**Using Spring Retry**\n"})}),"\n",(0,t.jsx)(n.h2,{id:"using-spring-retry",children:"Using Spring Retry"}),"\n",(0,t.jsx)(n.h3,{id:"retryable-without-recovery",children:"@Retryable Without Recovery"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"We can use the *@Retryable* annotation to add retry functionality to methods"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Service\npublic interface MyService {\n    @Retryable(value = RuntimeException.class)\n    void retryService(String sql);\n\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here, the retry is attempted when a ",(0,t.jsx)(n.em,{children:"RuntimeException"})," is thrown*.*"]}),"\n",(0,t.jsxs)(n.p,{children:["Per ",(0,t.jsx)(n.em,{children:"@Retryable"}),"\u2018s default behavior, ",(0,t.jsx)(n.strong,{children:"the retry may happen up to three times, with a delay of one second between retries."})]}),"\n",(0,t.jsx)(n.h3,{id:"retryable-and-recover",children:"@Retryable and @Recover"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Let's now add a recovery method using the *@Recover* annotation"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Service\npublic interface MyService {\n    @Retryable(value = SQLException.class)\n    void retryServiceWithRecovery(String sql) throws SQLException;\n        \n    @Recover\n    void recover(SQLException e, String sql);\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here, the retry is attempted when an ",(0,t.jsx)(n.em,{children:"SQLException"})," is thrown*.* ",(0,t.jsx)(n.strong,{children:"The *@Recover* annotation defines a separate recovery method when a *@Retryable* method fails with a specified exception."})]}),"\n",(0,t.jsxs)(n.p,{children:["Consequently, if the ",(0,t.jsx)(n.em,{children:"retryServiceWithRecovery"})," method keeps throwing an ",(0,t.jsx)(n.em,{children:"SqlException"})," after three attempts, the ",(0,t.jsx)(n.em,{children:"recover()"})," method will be called."]}),"\n",(0,t.jsxs)(n.p,{children:["The recovery handler should have the first parameter of type ",(0,t.jsx)(n.em,{children:"Throwable"})," (optional) and the same return type. The following arguments are populated from the argument list of the failed method in the same order."]}),"\n",(0,t.jsx)(n.h3,{id:"customizing-retryables-behavior",children:"Customizing @Retryable's Behavior"}),"\n",(0,t.jsxs)(n.p,{children:["In order to customize a retry's behavior, ",(0,t.jsx)(n.strong,{children:"we can use the parameters *maxAttempts* and"})," ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"backoff"})}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Service\npublic interface MyService {\n    @Retryable( value = SQLException.class, \n      maxAttempts = 2, backoff = @Backoff(delay = 100))\n    void retryServiceWithCustomization(String sql) throws SQLException;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"There will be up to two attempts and a delay of 100 milliseconds."}),"\n",(0,t.jsx)(n.h3,{id:"using-spring-properties",children:"Using Spring Properties"}),"\n",(0,t.jsxs)(n.p,{children:["We can also use properties in the ",(0,t.jsx)(n.em,{children:"@Retryable"})," annotation."]}),"\n",(0,t.jsxs)(n.p,{children:["To demonstrate this, ",(0,t.jsx)(n.strong,{children:"we'll see how to externalize the values of *delay* and *maxAttempts* into a properties file."})]}),"\n",(0,t.jsx)(n.p,{children:"First, let's define the properties in a file called retryConfig.properties:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-properties",children:"retry.maxAttempts=2\nretry.maxDelay=100\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We then instruct our ",(0,t.jsx)(n.em,{children:"@Configuration"})," class to load this file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@PropertySource("classpath:retryConfig.properties")\npublic class AppConfig { ... }\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Finally, ",(0,t.jsx)(n.strong,{children:"we can inject the values of retry.maxAttempts and retry.maxDelay in our @Retryable definition"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Service \npublic interface MyService { \n  @Retryable( value = SQLException.class, maxAttemptsExpression = "${retry.maxAttempts}",\n            backoff = @Backoff(delayExpression = "${retry.maxDelay}")) \n  void retryServiceWithExternalizedConfiguration(String sql) throws SQLException; \n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Please note that ",(0,t.jsx)(n.strong,{children:"we are now using *maxAttemptsExpression* and *delayExpression*"})," instead of ",(0,t.jsx)(n.em,{children:"maxAttempts"})," and ",(0,t.jsx)(n.em,{children:"delay"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"retrytemplate",children:"RetryTemplate"}),"\n",(0,t.jsx)(n.h3,{id:"retryoperations",children:"RetryOperations"}),"\n",(0,t.jsxs)(n.p,{children:["Spring Retry provides ",(0,t.jsx)(n.em,{children:"RetryOperations"})," interface, which supplies a set of ",(0,t.jsx)(n.em,{children:"execute()"})," methods:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public interface RetryOperations {\n    <T> T execute(RetryCallback<T> retryCallback) throws Exception;\n\n    //...\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.em,{children:"RetryCallback"}),", which is a parameter of the ",(0,t.jsx)(n.em,{children:"execute()"}),", is an interface that allows insertion of business logic that needs to be retried upon failure:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public interface RetryCallback<T> {\n    T doWithRetry(RetryContext context) throws Throwable;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"retrytemplate-configuration",children:"RetryTemplate Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.em,{children:"RetryTemplate"})," is an implementation of the ",(0,t.jsx)(n.em,{children:"RetryOperations"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's configure a ",(0,t.jsx)(n.em,{children:"RetryTemplate"})," bean in our ",(0,t.jsx)(n.em,{children:"@Configuration"})," class:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Configuration\npublic class AppConfig {\n    //...\n    @Bean\n    public RetryTemplate retryTemplate() {\n        RetryTemplate retryTemplate = new RetryTemplate();\n\t\t\n        FixedBackOffPolicy fixedBackOffPolicy = new FixedBackOffPolicy();\n        fixedBackOffPolicy.setBackOffPeriod(2000l);\n        retryTemplate.setBackOffPolicy(fixedBackOffPolicy);\n\n        SimpleRetryPolicy retryPolicy = new SimpleRetryPolicy();\n        retryPolicy.setMaxAttempts(2);\n        retryTemplate.setRetryPolicy(retryPolicy);\n\t\t\n        return retryTemplate;\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.em,{children:"RetryPolicy"})," determines when an operation should be retried."]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.em,{children:"SimpleRetryPolicy"})," is used to retry a fixed number of times. On the other hand, the ",(0,t.jsx)(n.em,{children:"BackOffPolicy"})," is used to control backoff between retry attempts."]}),"\n",(0,t.jsxs)(n.p,{children:["Finally, a ",(0,t.jsx)(n.em,{children:"FixedBackOffPolicy"})," pauses for a fixed period of time before continuing."]}),"\n",(0,t.jsx)(n.h3,{id:"using-the-retrytemplate",children:"Using the RetryTemplate"}),"\n",(0,t.jsxs)(n.p,{children:["To run code with retry handling, we can call the ",(0,t.jsx)(n.em,{children:"r**etryTemplate.execute()"})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"retryTemplate.execute(new RetryCallback<Void, RuntimeException>() {\n    @Override\n    public Void doWithRetry(RetryContext arg0) {\n        myService.templateRetryService();\n        ...\n    }\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Instead of an anonymous class, we can use a lambda expression:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"retryTemplate.execute(arg0 -> {\n    myService.templateRetryService();\n    return null;\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"listeners",children:"Listeners"}),"\n",(0,t.jsx)(n.p,{children:"Listeners provide additional callbacks upon retries. And we can use these for various cross-cutting concerns across different retries."}),"\n",(0,t.jsx)(n.h3,{id:"adding-callbacks",children:"Adding Callbacks"}),"\n",(0,t.jsxs)(n.p,{children:["The callbacks are provided in a ",(0,t.jsx)(n.em,{children:"RetryListener"})," interface:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class DefaultListenerSupport extends RetryListenerSupport {\n    @Override\n    public <T, E extends Throwable> void close(RetryContext context,\n      RetryCallback<T, E> callback, Throwable throwable) {\n        logger.info("onClose);\n        ...\n        super.close(context, callback, throwable);\n    }\n\n    @Override\n    public <T, E extends Throwable> void onError(RetryContext context,\n      RetryCallback<T, E> callback, Throwable throwable) {\n        logger.info("onError"); \n        ...\n        super.onError(context, callback, throwable);\n    }\n\n    @Override\n    public <T, E extends Throwable> boolean open(RetryContext context,\n      RetryCallback<T, E> callback) {\n        logger.info("onOpen);\n        ...\n        return super.open(context, callback);\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.em,{children:"open"})," and ",(0,t.jsx)(n.em,{children:"close"})," callbacks come before and after the entire retry, while ",(0,t.jsx)(n.em,{children:"onError"})," applies to the individual ",(0,t.jsx)(n.em,{children:"RetryCallback"})," calls."]}),"\n",(0,t.jsx)(n.h3,{id:"registering-the-listener",children:"Registering the Listener"}),"\n",(0,t.jsxs)(n.p,{children:["Next, we register our listener (",(0,t.jsx)(n.em,{children:"DefaultListenerSupport)"})," to our ",(0,t.jsx)(n.em,{children:"RetryTemplate"})," bean:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Configuration\npublic class AppConfig {\n    ...\n\n    @Bean\n    public RetryTemplate retryTemplate() {\n        RetryTemplate retryTemplate = new RetryTemplate();\n        ...\n        retryTemplate.registerListener(new DefaultListenerSupport());\n        return retryTemplate;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"testing-the-results",children:"Testing the Results"}),"\n",(0,t.jsx)(n.p,{children:"To finish our example, let's verify the results:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\n  classes = AppConfig.class,\n  loader = AnnotationConfigContextLoader.class)\npublic class SpringRetryIntegrationTest {\n\n    @Autowired\n    private MyService myService;\n\n    @Autowired\n    private RetryTemplate retryTemplate;\n\n    @Test(expected = RuntimeException.class)\n    public void givenTemplateRetryService_whenCallWithException_thenRetry() {\n        retryTemplate.execute(arg0 -> {\n            myService.templateRetryService();\n            return null;\n        });\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As we can see from the test logs, we have properly configured the ",(0,t.jsx)(n.em,{children:"RetryTemplate"})," and the ",(0,t.jsx)(n.em,{children:"RetryListener"})]}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:(0,t.jsx)(n.strong,{children:"Conclusion"})}),"\n",(0,t.jsxs)(n.p,{children:["In this article, we saw how to use Spring Retry using annotations, the ",(0,t.jsx)(n.em,{children:"RetryTemplate"})," and callbacks listeners."]}),"\n",(0,t.jsxs)(n.p,{children:["The source code for the examples is available ",(0,t.jsx)(n.a,{href:"https://github.com/eugenp/tutorials/tree/master/spring-scheduling",children:"over on GitHub"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.baeldung.com/spring-retry",children:"https://www.baeldung.com/spring-retry"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-retry",children:"https://github.com/spring-projects/spring-retry"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://link.jianshu.com/?t=http%3A%2F%2Fwww.itclj.com%2Fblog%2F59940a4081c06e672f942ae1",children:"http://www.itclj.com/blog/59940a4081c06e672f942ae1"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://developer.aliyun.com/article/92899",children:"https://developer.aliyun.com/article/92899"})}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var t=r(6540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);